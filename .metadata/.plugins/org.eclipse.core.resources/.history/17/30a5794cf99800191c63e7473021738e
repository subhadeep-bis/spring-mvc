package com.luv2code.controller;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.support.SessionStatus;

@Controller
@RequestMapping("/customer")
public class CustomerController {

	private Validator validator;

	@RequestMapping("/showForm")
	public String showForm(Model model) {
		model.addAttribute("customer", new Customer());
		return "customer-show-form";
	}

	@RequestMapping("/processForm")
	public String processForm(@ModelAttribute("customer") Customer customer, BindingResult bindingResult) {

		Set<ConstraintViolation<Customer>> violations = validator.validate(customer);
		for (ConstraintViolation<Customer> violation : violations) {
			String propertyPath = violation.getPropertyPath().toString();
			String message = violation.getMessage();
			// Add JSR-303 errors to BindingResult
			// This allows Spring to display them in view via a FieldError
			bindingResult.addError(new FieldError("customer", propertyPath,

					"Invalid " + propertyPath + "(" + message + ")"));
		}
		if (bindingResult.hasErrors()) {
	        return "addEmployee";
	    }
		return "customer-process-form";
	}
}
